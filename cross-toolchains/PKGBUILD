# Maintainer: jordan B. <bertieaux.jo@gmail.com>
pkgname="ToolschainsHeaders"
pkgver="1.0"
pkgrel=1
pkgdesc="Toolschains LFS Packages"
arch=(x86_64)
url=""
license=('GPL')
groups=()
depends=('figlet')
makedepends=()
optdepends=()
provides=()
conflicts=()
replaces=()
backup=()
options=()
install=
changelog=
source=(
  'http://192.168.1.202/aur/binutils-toolchains/BINUTILS-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/gcc-toolchains/GCC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/glibc-toolchains/GLIBC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/libstdc-toolchains/LIBSTDC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/linux-header-toolchains/LINUX-HEADER-TOOLCHAINS-PKGBUILD'
)
noextract=()
md5sums=(
  '3782eae6ad18386e20b277fe94337f51'
  '4bb7d0a9a2ce93495a082718b102f106'
  'ada8fad778405b0dbbb2df0c5313aec3'
  '925eb491332a2204c9b1b42d9d3c67dd'
  '32e7d33d746223efdefafc609d95d3a7'
) #autofill using updpkgsums

_BUILD_DIR=$(pwd)
_start=1
_end=100

build() {

  # Making the Binutils PASS-1
  _prepare "binutils" "BINUTILS-TOOLCHAINS-PKGBUILD"
  _ProgressBar 6 100
  _make "binutils"
  _ProgressBar 13 100
  _cleanning "binutils"
  _ProgressBar 20 100


  # Making the GCC PASS-1
  _prepare "gcc" "GCC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 26 100
  _make "gcc"
  _ProgressBar 33 100
  _cleanning "gcc"
  _ProgressBar 40 100


  # Making the Linux Header
  _prepare "linux-header" "LINUX-HEADER-TOOLCHAINS-PKGBUILD"
  _ProgressBar 46 100
  _make "linux-header"
  _ProgressBar 53 100
  _cleanning "linux-header"
  _ProgressBar 60 100


  # Making the GLIBC
  _prepare "glibc" "GLIBC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 66 100
  _make "glibc"
  _ProgressBar 73 100
  _cleanning "glibc"
  _ProgressBar 80 100


  # Making the LIBSTDC
  _prepare "libstc" "LIBSTDC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 86 100
  _make "libstc"
  _ProgressBar 93 100
  _cleanning "libstc"
  ProgressBar 100 100

}

package() {
  echo -e "No Install"  &>> /tmp/lfs_log
  cd ..
}

# /////////////////////////////////// < CUSTOM PACKAGING > ////////////////////////////////////

_prepare() {
  figlet "Prepare" &>> /tmp/lfs_log
  mkdir -pv $1 &>> /tmp/lfs_log
  cp -avr $2 $1/PKGBUILD &>> /tmp/lfs_log
}

_make() {
  figlet "MAKING" >> /tmp/lfs_log
  cd $1
  makepkg -f >> /tmp/lfs_log
}

_cleanning() {
  figlet "CLEANNIG" >> /tmp/lfs_log
  cd $_BUILD_DIR/src
  rm -rfv $1 >> /tmp/lfs_log
}


_ProgressBar() {
  # Process data
      let _progress=(${1}*100/${2}*100)/100
      let _done=(${_progress}*4)/10
      let _left=40-$_done
  # Build progressbar string lengths
      _fill=$(printf "%${_done}s")
      _empty=$(printf "%${_left}s")

  # 1.2 Build progressbar strings and print the ProgressBar line
  # 1.2.1 Output example:
  # 1.2.1.1 Progress : [########################################] 100%
  printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"
}
