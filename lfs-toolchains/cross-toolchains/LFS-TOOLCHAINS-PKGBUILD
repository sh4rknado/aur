# Maintainer: jordan B. <bertieaux.jo@gmail.com>
pkgname="lfs-toolschains"
pkgver="1.0"
pkgrel=1
pkgdesc="LFS Toolschains Packages"
arch=(x86_64)
url=""
license=('GPL')
groups=('lfs-toolschains')
depends=('figlet')
makedepends=()
optdepends=()
provides=()
conflicts=()
replaces=()
backup=()
options=()
install=
changelog=
source=(
  'http://192.168.1.202/aur/lfs-toolchains/binutils-toolchains/BINUTILS-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/lfs-toolchains/gcc-toolchains/GCC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/lfs-toolchains/glibc-toolchains/GLIBC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/lfs-toolchains/libstdc-toolchains/LIBSTDC-TOOLCHAINS-PKGBUILD'
  'http://192.168.1.202/aur/lfs-toolchains/linux-header-toolchains/LINUX-HEADER-TOOLCHAINS-PKGBUILD'
)
noextract=()
md5sums=(
  'bc73533cbba612f783dc45a3714fd044'
  '334d933c49c00495f43c75386c2cfb9c'
  '51056351e2e03774599ff5a53eafaad6'
  'c99a6d860a5d9292c20e67162ea91e1f'
  '5ddb7da167d10ca541d65797297d5fb5'
)

_BUILD_DIR=$(pwd)
_start=1
_end=100

build() {

  # Making the Binutils PASS-1
  _prepare "binutils" "BINUTILS-TOOLCHAINS-PKGBUILD"
  _ProgressBar 6 100
  _make "binutils"
  _ProgressBar 13 100
  _cleanning "binutils"
  _ProgressBar 20 100

  # Making the GCC PASS-1
  _prepare "gcc" "GCC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 26 100
  _make "gcc"
  _ProgressBar 33 100
  _cleanning "gcc"
  _ProgressBar 40 100

  # Making the Linux Header
  _prepare "linux-header" "LINUX-HEADER-TOOLCHAINS-PKGBUILD"
  _ProgressBar 46 100
  _make "linux-header"
  _ProgressBar 53 100
  _cleanning "linux-header"
  _ProgressBar 60 100

  # Making the GLIBC
  _prepare "glibc" "GLIBC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 66 100
  _make "glibc"
  _ProgressBar 73 100
  _cleanning "glibc"
  _ProgressBar 80 100

  # Making the LIBSTDC
  _prepare "libstc" "LIBSTDC-TOOLCHAINS-PKGBUILD"
  _ProgressBar 86 100
  _make "libstc"
  _ProgressBar 93 100
  _cleanning "libstc"
  _ProgressBar 100 100

}

package() {
  echo -e "No Install"
  cd ..
}

# /////////////////////////////////// < CUSTOM PACKAGING > ////////////////////////////////////

_prepare() {
  figlet "Prepare"
  mkdir -pv $1
  cp -avr $2 $1/PKGBUILD
}

_make() {
  figlet "MAKING"
  cd $1
  makepkg -f
}

_cleanning() {
  figlet "CLEANNIG"
  cd $_BUILD_DIR/src
  rm -rfv $1
}


_ProgressBar() {
  # Process data
      let _progress=(${1}*100/${2}*100)/100
      let _done=(${_progress}*4)/10
      let _left=40-$_done
  # Build progressbar string lengths
      _fill=$(printf "%${_done}s")
      _empty=$(printf "%${_left}s")

  # 1.2 Build progressbar strings and print the ProgressBar line
  # 1.2.1 Output example:
  # 1.2.1.1 Progress : [########################################] 100%
  printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"
}
